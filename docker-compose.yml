version: "3"
services:
  # ------- general ------ #
  redis:
    image: redis:7.2.4
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      start_period: 10s
    expose:
      - "${REDIS_PORT}"
  
  rabbitmq:
    image: rabbitmq:3.13.3-management
    container_name: rabbitmq   
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    ports:
      - 15672:15672
    expose:
      - "${RABBIT_PORT}"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # ------- auth service ------ #
  auth_db:
    image: postgres:13
    container_name: auth_db
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - pgdbauth_all:/var/lib/postgresql@13/data/
    expose:
      - "${AUTH_DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${AUTH_DB_NAME} -U ${AUTH_DB_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5

  auth_service:
    build:
      context: .
      dockerfile: ./auth/auth.Dockerfile
    command: sh -c "alembic upgrade head && python3 src/main.py"
    container_name: auth_service
    volumes:
      - ./auth/src/migrations:/app/src/migrations
    expose:
      - "${AUTH_API_PORT}"
    depends_on:
      redis:
        condition: service_healthy
      auth_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./auth/.env

  # # ------- loyalty service ------ #
  loyalty_db:
    image: postgres:13
    container_name: loyalty_db
    environment:
      POSTGRES_DB: ${LOYALTY_DB_NAME}
      POSTGRES_USER: ${LOYALTY_DB_USER}
      POSTGRES_PASSWORD: ${LOYALTY_DB_PASSWORD}
    volumes:
      - pgdbloyalty_all:/var/lib/postgresql@13/data/
    expose:
      - "${LOYALTY_DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${LOYALTY_DB_NAME} -U ${LOYALTY_DB_USER}"]
      interval: 5s
      timeout: 10s
      retries: 5


  loyalty_admin_service:
    container_name: loyalty_admin_service
    build:
      context: .
      dockerfile: ./admin/django.Dockerfile
    command: sh -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --no-input --clear && gunicorn config.wsgi:application --bind ${LOYALTY_ADMIN_HOST}:${LOYALTY_ADMIN_PORT}"
    expose:
      - "${LOYALTY_ADMIN_PORT}"
    volumes:
      - static_volume_all:/app/static
    depends_on:
      loyalty_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./admin/config/.env


  loyalty_api_service:
    container_name: loyalty_api_service
    build:
      context: .
      dockerfile: ./loyalty/loyalty.Dockerfile
    expose:
      - "${LOYALTY_API_PORT}"
    command: sh -c "python src/main.py"
    depends_on:
      loyalty_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./loyalty/.env

  loyalty_worker_reg:
    build:
      context: .
      dockerfile: ./worker/worker.Dockerfile
    container_name: loyalty_worker_reg
    command: sh -c "python3 main.py users.registration"
    depends_on:
      rabbitmq:
        condition: service_healthy
      loyalty_db:
        condition: service_healthy
    env_file:
      - ./worker/.env
  
  loyalty_worker_del:
    build:
      context: .
      dockerfile: ./worker/worker.Dockerfile
    container_name: loyalty_worker_del
    command: sh -c "python3 main.py users.delete"
    depends_on:
      rabbitmq:
        condition: service_healthy
      loyalty_db:
        condition: service_healthy
    env_file:
      - ./worker/.env

  # # ------- nginx ------ #
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf:ro
      - static_volume_all:/app/static:ro
    depends_on:
      auth_service:
        condition: service_started
      loyalty_api_service:
        condition: service_started
      loyalty_admin_service:
        condition: service_started
    ports:
      - "${SERVICE_PORT}:80"

  cloudbeaver:
    image: dbeaver/cloudbeaver:24.0.5
    container_name: services-dbeaver
    ports:
      - '8978:8978'
    volumes: 
      - cloudbeaver:/opt/cloudbeaver/workspace 

volumes:
  pgdbauth_all:
  pgdbloyalty_all:
  static_volume_all:
  cloudbeaver:
